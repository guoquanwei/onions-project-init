#!/usr/bin/env node

/**
 * Module dependencies.
 */
const http = require('http')
const app = require('../app/app')
const pkg = require('../package')
const logger = require('../app/helper/log.helper').getLogger('WWW')
require('../app/lib/redis')

const normalizePort = val => {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    return val
  }

  if (port >= 0) {
    return port
  }
  return false
}

const onError = error => {
  if (error.syscall !== 'listen') {
    throw error
  }
  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port
  switch (error.code) {
    case 'EACCES':
      logger.error(bind + ' requires elevated privileges')
      process.exit(1)
    case 'EADDRINUSE':
      logger.error(bind + ' is already in use')
      process.exit(1)
    default:
      throw error
  }
}
const onListening = () => {
  const addr = server.address()
  if (!process.env.NODE_ENV) process.env.NODE_ENV = 'development'
  logger.info(`${pkg.name}(v${pkg.version}) working on ${addr.port}, env is ${process.env.NODE_ENV}`)
}
process.on('unhandledRejection', function (err, promise) {
  logger.error('unhandledRejection', err)
})
const port = normalizePort(process.env.PORT || '80')
const server = http.createServer(app.callback())
server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

// migration 自动运行
const cp = require('child_process')

if (process.env.NODE_ENV === 'production') {
  cp.exec('npm run migrate-production', {}, (err, stdout, stderr) => {
    if (err) {
      logger.error(err)
      process.exit(-1)
    }
  })
} else if (process.env.NODE_ENV === 'stage') {
  cp.exec('npm run migrate-stage', {}, (err, stdout, stderr) => {
    if (err) {
      logger.error(err)
      process.exit(-1)
    }
  })
} else {
  cp.exec('npm run migrate', {}, (err, stdout, stderr) => {
    if (err) {
      logger.error(err)
      process.exit(-1)
    }
  })
}
